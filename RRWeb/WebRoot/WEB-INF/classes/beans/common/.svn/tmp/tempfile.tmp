package beans.common;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Types;


import org.apache.commons.collections.OrderedMap;
import org.apache.commons.collections.map.LinkedMap;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;

import vms.pojo.FuelType;
import vms.pojo.MakeCompany;
import vms.pojo.PlateType;
import vms.pojo.VehicleData;
import vms.pojo.VehicleType;
import eth.factory.ConnectionFactory;
import eth.i18n.ETHi18n;
import eth.logger.ETHLogger;

import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.Vector;
public class CommonBean {

	private ConnectionFactory cf = null; 

	ETHi18n i18n = null; 
	String dbConnVar = "";

	public CommonBean(String dbConnVar) {
		cf = new ConnectionFactory(dbConnVar);
		this.i18n = new ETHi18n(dbConnVar, true);
		this.dbConnVar = dbConnVar;
	}
	
	
	public ArrayList<PlateType> getPlateTypes(String dbConnVar)
	{
		Connection con=null;
		Statement stmt=null;
		ResultSet rs=null;
		String query=null;
		String returnValue=null;
		ConnectionFactory cf =null;
		ArrayList<PlateType> plateTypesAL=null;
		try
		{
			cf= new ConnectionFactory(dbConnVar);
			con=cf.getConnection();
			if(con==null)
			{
				return null; 
			}
			stmt=con.createStatement();
			query=" SELECT * from vms_plate_type_master where status='V'";
			rs=stmt.executeQuery(query);
			//ETHLogger.log(dbConnVar, "Before->"+query);
			plateTypesAL=new ArrayList<PlateType>();
			while(rs.next())
			{
				//ETHLogger.log(dbConnVar, "After->"+query);
				PlateType plateType=new PlateType();
				plateType.setPlate_type_id(Integer.parseInt(rs.getString("plate_type_id")));
				plateType.setPlate_type_code(rs.getString("plate_type_code"));
				plateType.setStatus(rs.getString("status"));
            	plateTypesAL.add(plateType);
			}
		}//end of try block
		catch(Exception e)
		{
			ETHLogger.log(dbConnVar,e);
		}
		finally
		{
			try
			{
				if(rs!=null)
				{
					rs.close();
				}
				if(stmt!=null)
				{
					stmt.close();
				}
				if(con!=null)
				{
					cf.freeConnection(con);
				}
			}
			catch(Exception e)
			{
				ETHLogger.log(dbConnVar + "_VMS",e);
			}
		}//End of finally block
		return plateTypesAL;
	}
	
	
	public ArrayList<VehicleType> getVehicleTypes(String dbConnVar)
	{
		Connection con=null;
		Statement stmt=null;
		ResultSet rs=null;
		String query=null;
		String returnValue=null;
		ConnectionFactory cf =null;
		ArrayList<VehicleType> vehicleTypesAL=null;
		try
		{
			cf= new ConnectionFactory(dbConnVar);
			con=cf.getConnection();
			if(con==null)
			{
				return null; 
			} 
			stmt=con.createStatement();
			query=" SELECT * from vms_vehicle_type_master where vehicle_type_status='V'";
			rs=stmt.executeQuery(query);
			//ETHLogger.log(dbConnVar, "Before->"+query);
			vehicleTypesAL=new ArrayList<VehicleType>();
			while(rs.next())
			{
			//	ETHLogger.log(dbConnVar, "After->"+query);
				VehicleType vehicleType=new VehicleType();
				vehicleType.setVehicle_type_id(Integer.parseInt(rs.getString("vehicle_type_id")));
				vehicleType.setVehicle_type_name(rs.getString("vehicle_type_name"));
				vehicleType.setVehicle_type_status(rs.getString("vehicle_type_status"));
				vehicleTypesAL.add(vehicleType);
			}
		}//end of try block
		catch(Exception e)
		{
			ETHLogger.log(dbConnVar + "_VMS",e);
		}
		finally
		{
			try
			{
				if(rs!=null)
				{
					rs.close();
				}
				if(stmt!=null)
				{
					stmt.close();
				}
				if(con!=null)
				{
					cf.freeConnection(con);
				}
			}
			catch(Exception e)
			{
				ETHLogger.log(dbConnVar + "_VMS",e);
			}
		}//End of finally block
		return vehicleTypesAL;
	}
	
	
	public ArrayList<FuelType> getFuelTypes(String dbConnVar)
	{
		Connection con=null;
		Statement stmt=null;
		ResultSet rs=null;
		String query=null;
		String returnValue=null;
		ConnectionFactory cf =null;
		ArrayList<FuelType> fuelTypesAL=null;
		try
		{
			cf= new ConnectionFactory(dbConnVar);
			con=cf.getConnection();
			if(con==null)
			{
				return null; 
			} 
			stmt=con.createStatement();
			query=" SELECT * from vms_fuel_type_master";
			rs=stmt.executeQuery(query);
			//ETHLogger.log(dbConnVar, "Before->"+query);
			fuelTypesAL=new ArrayList<FuelType>();
			while(rs.next())
			{
				//ETHLogger.log(dbConnVar, "After->"+query);
				FuelType fueltype=new FuelType();
				fueltype.setFuel_type_id(Integer.parseInt(rs.getString("fuel_type_id")));
				fueltype.setFuel_type_desc(rs.getString("fuel_type_desc"));
				
				fuelTypesAL.add(fueltype);
			}
		}//end of try block
		catch(Exception e)
		{
			ETHLogger.log(dbConnVar + "_VMS",e);
		}
		finally
		{
			try
			{
				if(rs!=null)
				{
					rs.close();
				}
				if(stmt!=null)
				{
					stmt.close();
				}
				if(con!=null)
				{
					cf.freeConnection(con);
				}
			}
			catch(Exception e)
			{
				ETHLogger.log(dbConnVar + "_VMS",e);
			}
		}//End of finally block
		return fuelTypesAL;
	}
	
	
	
	public ArrayList<MakeCompany> getMakeCompany(String dbConnVar)
	{
		Connection con=null;
		Statement stmt=null;
		ResultSet rs=null;
		String query=null;
		String returnValue=null;
		ConnectionFactory cf =null;
		ArrayList<MakeCompany> makeCompanyAL=null;
		try
		{
			cf= new ConnectionFactory(dbConnVar);
			con=cf.getConnection();
			if(con==null)
			{
				return null; 
			} 
			stmt=con.createStatement();
			query=" SELECT * from vms_vehicle_maker_master";
			rs=stmt.executeQuery(query);
			//ETHLogger.log(dbConnVar, "Before->"+query);
			makeCompanyAL=new ArrayList<MakeCompany>();
			while(rs.next())
			{
				//ETHLogger.log(dbConnVar, "After->"+query);
				MakeCompany makeCompany=new MakeCompany();
				makeCompany.setMaker_id(Integer.parseInt(rs.getString("maker_id")));
				makeCompany.setMaker_name(rs.getString("maker_name"));
				makeCompany.setStatus(rs.getString("status"));
				
				makeCompanyAL.add(makeCompany);
			}
		}//end of try block
		catch(Exception e)
		{
			ETHLogger.log(dbConnVar + "_VMS",e);
		}
		finally
		{
			try
			{
				if(rs!=null)
				{
					rs.close();
				}
				if(stmt!=null)
				{
					stmt.close();
				}
				if(con!=null)
				{
					cf.freeConnection(con);
				}
			}
			catch(Exception e)
			{
				ETHLogger.log(dbConnVar + "_VMS",e);
			}
		}//End of finally block
		return makeCompanyAL;
	}
	
	
	
	
	public ArrayList<VehicleData> getVehicleData(String dbConnVar)
	{
		Connection con=null;
		CallableStatement cs = null;
		ResultSet rs = null;
		int result = 0;

		
		String returnValue=null;
		ConnectionFactory cf =null;
		ArrayList<VehicleData> vehicleDataAL=null;
		try
		{
			cf= new ConnectionFactory(dbConnVar);
			con=cf.getConnection();
			if(con==null)
			{
				return null; 
			} 
			ETHLogger.log(dbConnVar + "_VMS","select fun_retrive_vms_vehicle_details" );
			cs = con.prepareCall("{? = call fun_retrive_vms_vehicle_details(?)}");
			
			cs.registerOutParameter(1, Types.OTHER); 
			cs.setObject(2, rs);
			con.setAutoCommit(false);
		    cs.execute();
			
			
			cs.execute();
			rs = (ResultSet) cs.getObject(1);
 
			vehicleDataAL=new ArrayList<VehicleData>();
			while(rs.next())
			{
				
				VehicleData vehicledata=new VehicleData();
				vehicledata.setVehicleId(rs.getInt("vehicle_id"));
				vehicledata.setVehicleRegNo(rs.getString("vehicle_reg_no"));
				vehicledata.setMakeCompany(rs.getString("vehicle_maker_company"));
				vehicledata.setModel(rs.getString("vehicle_model"));
				vehicledata.setPlateType(rs.getString("plate_type"));
				vehicledata.setChassisNo(rs.getString("chassis_no"));
				vehicledata.setEngineNo(rs.getString("engine_no"));
				vehicledata.setTrafficFileNo(rs.getString("traffic_file_no"));
				vehicledata.setIvmsNo(rs.getString("ivms_no"));
				vehicledata.setEngineCapacity(rs.getString("engine_capacity"));
				vehicledata.setFuelCardNo(rs.getString("fuel_card_no"));
				vehicledata.setFuelType(rs.getString("fuel_Type"));
				vehicledata.setVehicleType(rs.getString("vehicle_type_name"));
				vehicledata.setExpAccount(rs.getString("vehicle_expense_account"));
				
				
<<<<<<< .mine
				ETHLogger.log(dbConnVar, "Venicle Master->"+vehicledata.getVehicleRegNo());
=======
				//ETHLogger.log(dbConnVar, "After->"+vehicledata.getVehicleRegNo());
>>>>>>> .r141685
				
				vehicleDataAL.add(vehicledata);
			}
		}//end of try block
		catch(Exception e)
		{
			ETHLogger.log(dbConnVar + "_VMS",e);
		}
		finally
		{
			try
			{
				if(rs!=null)
				{
					rs.close();
				}
				if(cs!=null)
				{
					cs.close();
				}
				if(con!=null)
				{
					cf.freeConnection(con);
				}
			}
			catch(Exception e)
			{
				ETHLogger.log(dbConnVar + "_VMS",e);
			}
		}//End of finally block
		//ETHLogger.log(dbConnVar, "Return ->"+vehicleDataAL.toString());
		return vehicleDataAL;
	}
	
	 
	
	
	
	public int insertVehicleDetails(String data,String insertUpdateFlag,String token) {
		Connection con = null;
		CallableStatement cs = null;
		ResultSet rs = null;
		int result = 0;

		try {
			con = cf.getConnection();
			ETHLogger.log(dbConnVar,"select fun_insert_update_vms_vehicle_details("+data);  
			cs = con.prepareCall("{? = call fun_insert_update_vms_vehicle_details(?,?,?)}");
			cs.registerOutParameter(1, Types.INTEGER); 
			cs.setString(2, data);
			cs.setString(3, insertUpdateFlag);  
			cs.setString(4, token);  
			cs.execute();
			result = cs.getInt(1);

		} catch (Exception e) {
			ETHLogger.log(dbConnVar + "_VMS",e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (cs != null) {
					cs.close();
				}
				if (con != null) {
					cf.freeConnection(con);
				}
			} catch (Exception e) {
				ETHLogger.log(dbConnVar + "_VMS", e);
			} 
		}// end of finally
		return result;
	}// end of insertVehicleDetails() method
	
	public int insertDriverAllocationDetails(String data,String token) {
		Connection con = null;
		CallableStatement cs = null;
		ResultSet rs = null;
		int result = 0; 

		try {
			con = cf.getConnection();
			ETHLogger.log(dbConnVar,"select fun_insert_update_vms_driver_allocation_details("+data+","+token);  
			cs = con.prepareCall("{? = call fun_insert_update_vms_driver_allocation_details(?,?)}"); 
			cs.registerOutParameter(1, Types.INTEGER); 
			cs.setString(2, data);
			cs.setString(3, token);  
			cs.execute();
			result = cs.getInt(1);

		} catch (Exception e) {
			ETHLogger.log(dbConnVar + "_VMS",e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (cs != null) {
					cs.close();
				}
				if (con != null) {
					cf.freeConnection(con);
				}
			} catch (Exception e) {
				ETHLogger.log(dbConnVar + "_VMS", e);
			} 
		}// end of finally
		return result;
	}// end of insertDriverAllocationDetails() method
	
	public int insertFuelReadingDetails(String data,String insertUpdateFlag,String token ) { 
		Connection con = null;
		CallableStatement cs = null;
		ResultSet rs = null;
		int result = 0; 

		try { 
			con = cf.getConnection();
			ETHLogger.log(dbConnVar,"select fun_insert_update_vms_fuel_reading_details("+data+","+insertUpdateFlag);  
			cs = con.prepareCall("{? = call fun_insert_update_vms_fuel_reading_details(?,?,?)}"); 
			cs.registerOutParameter(1, Types.INTEGER); 
			cs.setString(2, data);
			cs.setString(3, insertUpdateFlag);
			cs.setString(4, token); 
			cs.execute();
			result = cs.getInt(1);

		} catch (Exception e) {
			ETHLogger.log(dbConnVar + "_VMS",e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (cs != null) {
					cs.close();
				}
				if (con != null) {
					cf.freeConnection(con);
				}
			} catch (Exception e) {
				ETHLogger.log(dbConnVar + "_VMS", e); 
			} 
		}// end of finally
		return result;
	}// end of insertFuelReadingDetails() method
	
	public OrderedMap  getVehicleDetails(String vehicleId){
        
	    Connection con = null;
		CallableStatement cstmt = null;
		ResultSet rs = null;
		OrderedMap appOM = new LinkedMap();
		try{
			
			con = cf.getConnection();
			
			cstmt =con.prepareCall("{? = call fun_retrive_vms_edit_vehicle_details(?,?)}"); 
			cstmt.registerOutParameter(1,Types.OTHER);
			cstmt.setString(2, vehicleId );
			cstmt.setObject(3, rs );
			con.setAutoCommit(false);
		    cstmt.execute();
			  rs  = (ResultSet) cstmt.getObject(1);
			
			if(rs.next()){
				String vehicle_id  ="",vehicle_reg_no="",vehicle_type_id="",plate_type_id="",chassis_no="",engine_no="",
				traffic_file_no="",engine_capacity="",maker_id="",vehicle_model="",ivms_no="",vehicle_owner="",
				fuel_type_id="",fuel_capacity="",fuel_card_no="",seating_capacity="",vehicle_avg_km="",vehicle_expense_account="",fuel_limit=""
					,registration_expiry_date="",contract_expiry_date="",hired_date="",office_hired_date="",hiredRate="",contract_ref_no="",vehicle_status="";
									
				do{
					
					  
					vehicle_reg_no=rs.getString(1);
					vehicle_type_id=rs.getString(2);
					plate_type_id=rs.getString(3);
					chassis_no=rs.getString(4);
					engine_no=rs.getString(5);
					traffic_file_no=rs.getString(6);
					engine_capacity=rs.getString(7);
					maker_id=rs.getString(8);
					vehicle_model=rs.getString(9);
					ivms_no=rs.getString(10);
					vehicle_owner=rs.getString(11);
					fuel_type_id=rs.getString(12); 
					fuel_capacity=rs.getString(13);
					fuel_card_no=rs.getString(14);
					seating_capacity=rs.getString(15);
					vehicle_avg_km=rs.getString(16);
					vehicle_expense_account=rs.getString(17);
					
					fuel_limit=rs.getString(18);
					registration_expiry_date=rs.getString(19);
					contract_expiry_date=rs.getString(20);
					hired_date=rs.getString(21);
					office_hired_date=rs.getString(22);
					hiredRate=rs.getString(23);
					contract_ref_no=rs.getString(24);
					vehicle_status=rs.getString(25);
					 
					 
					appOM.put(vehicle_reg_no,vehicle_reg_no+"$"+vehicle_type_id+"$"+plate_type_id+"$"+chassis_no+"$"+engine_no+"$"+
							traffic_file_no+"$"+engine_capacity+"$"+maker_id+"$"+vehicle_model+"$"+ivms_no+"$"+vehicle_owner
							+"$"+fuel_type_id+"$"+fuel_capacity+"$"+fuel_card_no+"$"+seating_capacity+"$"+vehicle_avg_km
							+"$"+vehicle_expense_account+"$"+fuel_limit+"$"+registration_expiry_date+"$"+contract_expiry_date
							+"$"+hired_date+"$"+office_hired_date+"$"+hiredRate+"$"+contract_ref_no 
							);
				}while(rs.next());
			}
			
		}catch(Exception e){

		ETHLogger.log(dbConnVar + "_VMS", e);
		 }
		finally {
			try {
				  if (cstmt != null){
					  cstmt.close();
				  }
				  if(con != null){
				  con.close();
				  }
				  
				  if(rs!=null){
					rs.close();  
					 }
			  } catch (Exception e ) {
				  ETHLogger.log(dbConnVar + "_VMS",e);
			  } 

		}
     
		return appOM;
	} 
	
	
	public OrderedMap getDriverDetails(String dbConnVar,String vehicleId)
	{
		Connection con=null;
		Statement stmt=null;
		ResultSet rs=null;
		
		String returnValue=null;
		ConnectionFactory cf =null;
		OrderedMap appOM = new LinkedMap();
		ArrayList<VehicleData> vehicleDataAL=null;
		try
		{
			cf= new ConnectionFactory(dbConnVar);
			con=cf.getConnection();
			if(con==null)
			{
				return null; 
			} 
			stmt=con.createStatement();
			StringBuilder query=new StringBuilder();
			query.append(" select vehicle_id,vehicle_reg_no,driver_name,driver_mobile_no from vms_vehicle_driver_details where vehicle_Id="+vehicleId+" and status='V'");
			//ETHLogger.log(dbConnVar, "Before->"+query.toString());
			rs=stmt.executeQuery(query.toString());
			
			String vehicleRegNo;
			
			if(rs.next()){
				  String driverName="",mobileNo="";
									
				do{
					vehicleId=Integer.toString(rs.getInt(1));
					vehicleRegNo=rs.getString(2);
					driverName=rs.getString(3);
					mobileNo=rs.getString(4);
				    appOM.put(vehicleId,vehicleRegNo+"$"+driverName+"$"+mobileNo);
				}while(rs.next());
			}
			
		}//end of try block
		catch(Exception e)
		{
			ETHLogger.log(dbConnVar + "_VMS",e);
		}
		finally
		{
			try
			{
				if(rs!=null)
				{
					rs.close();
				}
				if(stmt!=null)
				{
					stmt.close();
				}
				if(con!=null)
				{
					cf.freeConnection(con);
				}
			}
			catch(Exception e)
			{
				ETHLogger.log(dbConnVar + "_VMS",e);
			}
		}//End of finally block
		return appOM;
	}
	
	
	public JsonArray getExpenseAccounts(String dbConnVar,int company_id,int statement_code2)
	{
		Connection con=null;
		Statement stmt=null;
		ResultSet rs=null;
		JsonArray jsonData=new JsonArray();
		
		String returnValue=null;
		ConnectionFactory cf =null;
		OrderedMap appOM = new LinkedMap();
		ArrayList<VehicleData> vehicleDataAL=null;
		try
		{
			cf= new ConnectionFactory(dbConnVar);
			con=cf.getConnection();
			if(con==null)
			{
				return null; 
			} 
			stmt=con.createStatement();
			StringBuilder query=new StringBuilder();
			query.append(" select acc_ledger_id,acc_ledger_desc from acc_ledger_master c,acc_group_master gm");
			query.append(" where c.group_id1=group_id and c.company_id="+company_id);
			query.append(" and statement_code2="+statement_code2+" and c.status='V'");
			query.append(" order by acc_ledger_desc");
		    //ETHLogger.log(dbConnVar, "Before->"+query.toString());
			rs=stmt.executeQuery(query.toString());
		while(rs.next() ) {
					JsonObject jsonObject = new JsonObject();	
					jsonObject.add("acc_ledger_id", new JsonPrimitive(rs.getString("acc_ledger_id")));
					jsonObject.add("acc_ledger_desc", new JsonPrimitive(rs.getString("acc_ledger_desc")));
					jsonData.add(jsonObject);
				}
				
		
		}//end of try block
		catch(Exception e)
		{
			ETHLogger.log(dbConnVar + "_VMS",e);
		}
		finally
		{
			try
			{
				if(rs!=null)
				{
					rs.close();
				}
				if(stmt!=null)
				{
					stmt.close();
				}
				if(con!=null)
				{
					cf.freeConnection(con);
				}
			}
			catch(Exception e)
			{
				ETHLogger.log(dbConnVar + "_VMS",e);
			}
		}//End of finally block
		return jsonData;
	}
	
	
	public ArrayList<VehicleData> getVehicleByRegNo(String dbConnVar,String vehicleRegNo)
	{
		Connection con=null;
		Statement stmt=null;
		ResultSet rs=null;
		
		ConnectionFactory cf =null;
		ArrayList<VehicleData> vehicleDataAL=null;
		try
		{
			cf= new ConnectionFactory(dbConnVar);
			con=cf.getConnection();
			if(con==null)
			{
				return null; 
			} 
			stmt=con.createStatement();
			StringBuilder query=new StringBuilder();
			
			query.append(" select vm.*,ptm.plate_type_code,vtm.vehicle_type_name,ft.fuel_type_desc,vmm.maker_name from vms_vehicle_master vm ");
			query.append(" left join vms_plate_type_master ptm on vm.plate_type_id=ptm.plate_type_id ");
			query.append(" left join vms_vehicle_type_master vtm on vm.vehicle_type_id=vtm.vehicle_type_id ");
			query.append(" left join vms_fuel_type_master ft on  vm.fuel_type_id=ft.fuel_type_id ");
			query.append(" left join vms_vehicle_maker_master vmm on vm.maker_id=vmm.maker_id ");
			query.append(" where vehicle_reg_no="+vehicleRegNo);

 
			
 
			rs=stmt.executeQuery(query.toString());
			//ETHLogger.log(dbConnVar, "Before->"+query.toString());
			
			vehicleDataAL=new ArrayList<VehicleData>();
			if(rs.next())
			{
				
				VehicleData vehicledata=new VehicleData();
				vehicledata.setVehicleId(rs.getInt("vehicle_id"));
				vehicledata.setVehicleRegNo(rs.getString("vehicle_reg_no"));
				vehicledata.setMakeCompany(rs.getString("maker_name"));
				vehicledata.setModel(rs.getString("vehicle_model"));
				vehicledata.setPlateType(rs.getString("plate_type_code"));
				vehicledata.setChassisNo(rs.getString("chassis_no"));
				vehicledata.setEngineNo(rs.getString("engine_no"));
				vehicledata.setTrafficFileNo(rs.getString("traffic_file_no"));
				vehicledata.setIvmsNo(rs.getString("ivms_no"));
				vehicledata.setEngineCapacity(rs.getString("engine_capacity"));
				vehicledata.setFuelCardNo(rs.getString("fuel_card_no"));
				vehicledata.setFuelType(rs.getString("fuel_Type_desc"));
				vehicledata.setVehicleType(rs.getString("vehicle_type_name"));
				vehicledata.setExpAccount(rs.getString("vehicle_expense_account"));
				
				
				//ETHLogger.log(dbConnVar, "After->"+query+vehicledata.getVehicleRegNo());
				
				vehicleDataAL.add(vehicledata);
			}
		}//end of try block
		catch(Exception e)
		{
			ETHLogger.log(dbConnVar + "_VMS",e);
		}
		finally
		{
			try
			{
				if(rs!=null)
				{
					rs.close();
				}
				if(stmt!=null)
				{
					stmt.close();
				}
				if(con!=null)
				{
					cf.freeConnection(con);
				}
			}
			catch(Exception e)
			{
				ETHLogger.log(dbConnVar + "_VMS",e);
			}
		}//End of finally block
		return vehicleDataAL;
	}
	 public int insertServiceEntryDetails(String data,String token) { 
			Connection con = null;
			CallableStatement cs = null;
			ResultSet rs = null;
			int result = 0; 

			try { 
				con = cf.getConnection();
				ETHLogger.log(dbConnVar,"select fun_insert_vms_service_entry_details('"+data+"','"+token+"'");  
				cs = con.prepareCall("{? = call fun_insert_vms_service_entry_details(?,?)}"); 
				cs.registerOutParameter(1, Types.INTEGER); 
				cs.setString(2, data);
				cs.setString(3, token);  
				cs.execute();
				result = cs.getInt(1);

			} catch (Exception e) {
				ETHLogger.log(dbConnVar + "_VMS", e);
			} finally {
				try {
					if (rs != null) {
						rs.close();
					}
					if (cs != null) {
						cs.close();
					}
					if (con != null) {
						cf.freeConnection(con);
					}
				} catch (Exception e) {
					ETHLogger.log(dbConnVar + "_VMS", e);
				} 
			}// end of finally  
			 
			return result;
		}// end of insertServiceEntryDetails() method
	 
	 public int insertRepairEntryDetails(String data,String token) { 
			Connection con = null;
			CallableStatement cs = null;
			ResultSet rs = null;
			int result = 0; 

			try {  
				con = cf.getConnection();
				ETHLogger.log(dbConnVar,"select fun_insert_vms_repair_entry_details('"+data+"','"+token+"'");  
				cs = con.prepareCall("{? = call fun_insert_vms_repair_entry_details(?,?)}"); 
				cs.registerOutParameter(1, Types.INTEGER); 
				cs.setString(2, data);
				cs.setString(3, token);  
				cs.execute();
				result = cs.getInt(1);

			} catch (Exception e) {
				ETHLogger.log(dbConnVar + "_VMS", e);
			} finally {
				try {
					if (rs != null) {
						rs.close();
					}
					if (cs != null) {
						cs.close();
					}
					if (con != null) {
						cf.freeConnection(con);
					}
				} catch (Exception e) {
					ETHLogger.log(dbConnVar + "_VMS", e);
				} 
			}// end of finally  
			 
			return result;
		}// end of insertServiceEntryDetails() method
	 
	 public int insertAccidentDetails(String data,String token) { 
			Connection con = null;
			CallableStatement cs = null;
			ResultSet rs = null;
			int result = 0; 
 
			try { 
				con = cf.getConnection();
				ETHLogger.log(dbConnVar,"select fun_insert_vms_accident_details('"+data+"','"+token+"'");  
				cs = con.prepareCall("{? = call fun_insert_vms_accident_details(?,?)}"); 
				cs.registerOutParameter(1, Types.INTEGER); 
				cs.setString(2, data);
				cs.setString(3, token);  
				cs.execute();
				result = cs.getInt(1);

			} catch (Exception e) {
				ETHLogger.log(dbConnVar + "_VMS", e);
			} finally {
				try {
					if (rs != null) {
						rs.close();
					}
					if (cs != null) {
						cs.close();
					}
					if (con != null) {
						cf.freeConnection(con);
					}
				} catch (Exception e) {
					ETHLogger.log(dbConnVar + "_VMS", e);
				} 
			}// end of finally  
			 
			return result;
		}// end of insertAccidentDetails() method
	 
	 public int insertVehiclRegistrationDetails(String data,String token,String insertUpdateFlag) { 
			Connection con = null;
			CallableStatement cs = null;
			ResultSet rs = null;
			int result = 0; 
 
			try { 
				con = cf.getConnection();
				ETHLogger.log(dbConnVar,"select fun_insert_vms_vehicle_registration_details('"+data+"','"+token+"'");  
				cs = con.prepareCall("{? = call fun_insert_vms_vehicle_registration_details(?,?,?)}"); 
				cs.registerOutParameter(1, Types.INTEGER); 
				cs.setString(2, data);
				cs.setString(3, token);  
				cs.setString(4, insertUpdateFlag);  
				cs.execute();
				result = cs.getInt(1);

			} catch (Exception e) {
				ETHLogger.log(dbConnVar + "_VMS", e);
			} finally {
				try {
					if (rs != null) {
						rs.close();
					}
					if (cs != null) {
						cs.close();
					}
					if (con != null) {
						cf.freeConnection(con);
					}
				} catch (Exception e) {
					ETHLogger.log(dbConnVar + "_VMS", e);
				} 
			}// end of finally  
			 
			return result;
		}// end of insertVehiclRegistrationDetails() method
	 
	 public int insertVehiclInsuranceDetails(String data,String token, String insertUpdateFlag) { 
			Connection con = null;
			CallableStatement cs = null;
			ResultSet rs = null;
			int result = 0; 
 
			try { 
				con = cf.getConnection();
				ETHLogger.log(dbConnVar,"select fun_insert_vms_vehicle_insurance_details('"+data+"','"+token+"'");  
				cs = con.prepareCall("{? = call fun_insert_vms_vehicle_insurance_details(?,?,?)}"); 
				cs.registerOutParameter(1, Types.INTEGER); 
				cs.setString(2, data);
				cs.setString(3, token);  
				cs.setString(4, insertUpdateFlag); 
				cs.execute();
				result = cs.getInt(1);

			} catch (Exception e) {
				ETHLogger.log(dbConnVar + "_VMS", e);
			} finally {
				try {
					if (rs != null) {
						rs.close();
					}
					if (cs != null) {
						cs.close();
					}
					if (con != null) {
						cf.freeConnection(con);
					}
				} catch (Exception e) {
					ETHLogger.log(dbConnVar + "_VMS", e);
				} 
			}// end of finally  
			 
			return result;
		}// end of insertVehiclInsuranceDetails() method
	
<<<<<<< .mine
	
	public JsonArray getMulkiyaTypes(String dbConnVar)
	{
		Connection con=null;
		Statement stmt=null;
		ResultSet rs=null;
		JsonArray jsonData=new JsonArray();
		
		String returnValue=null;
		ConnectionFactory cf =null;
		OrderedMap appOM = new LinkedMap();
		ArrayList<VehicleData> vehicleDataAL=null;
		try
		{
			cf= new ConnectionFactory(dbConnVar);
			con=cf.getConnection();
			if(con==null)
			{
				return null; 
			} 
			stmt=con.createStatement();
			StringBuilder query=new StringBuilder();
			query.append(" select * from vms_mulkiya_type_master");
		    //ETHLogger.log(dbConnVar, "Before->"+query.toString());
			rs=stmt.executeQuery(query.toString());
		while(rs.next() ) {
					JsonObject jsonObject = new JsonObject();	
					jsonObject.add("vms_mulkiya_type_id", new JsonPrimitive(rs.getInt("vms_mulkiya_type_id")));
					jsonObject.add("mulkiya_type", new JsonPrimitive(rs.getString("mulkiya_type")));
					jsonData.add(jsonObject);
				}
				
		
		}//end of try block
		catch(Exception e)
		{
			ETHLogger.log(dbConnVar + "_VMS",e);
		}
		finally
		{
			try
			{
				if(rs!=null)
				{
					rs.close();
				}
				if(stmt!=null)
				{
					stmt.close();
				}
				if(con!=null)
				{
					cf.freeConnection(con);
				}
			}
			catch(Exception e)
			{
				ETHLogger.log(dbConnVar + "_VMS",e);
			}
		}//End of finally block
		return jsonData;
	}
	
public JsonObject  getVehicleDetailsJSON(String dbConnVar,String vehicleId){
        
	    Connection con = null;
		CallableStatement cstmt = null;
		ResultSet rs = null;
		OrderedMap appOM = new LinkedMap();
	
		JsonObject jsonObject = new JsonObject();
		try{
			ETHLogger.log(dbConnVar+"_VMS","Inside Bean vehicleId"+vehicleId );	
			
			con = cf.getConnection();
			ETHLogger.log(dbConnVar+"_VMS","select fun_retrive_vms_edit_vehicle_details('"+vehicleId+"','c');");
			cstmt =con.prepareCall("{? = call fun_retrive_vms_edit_vehicle_details(?,?)}"); 
			cstmt.registerOutParameter(1,Types.OTHER);
			cstmt.setString(2, vehicleId );
			cstmt.setObject(3, rs );
			con.setAutoCommit(false);
		    cstmt.execute();
			  rs  = (ResultSet) cstmt.getObject(1);
				if(rs.next()) {
						jsonObject.add("vehicle_reg_no",new JsonPrimitive(rs.getString(1)));
						jsonObject.add("vehicle_type_name", new JsonPrimitive(rs.getString(2)));
						jsonObject.add("plate_type", new JsonPrimitive(rs.getString(3)));
						jsonObject.add("chassis_no", new JsonPrimitive(rs.getString(3)));
						jsonObject.add("engine_no", new JsonPrimitive(rs.getString(4)));
						jsonObject.add("traffic_file_no", new JsonPrimitive(rs.getString(5)));
						jsonObject.add("engine_capacity", new JsonPrimitive(rs.getString(6)));
						jsonObject.add("maker_company", new JsonPrimitive(rs.getString(7)));
						jsonObject.add("vehicle_model", new JsonPrimitive(rs.getString(8)));
						jsonObject.add("ivms_no", new JsonPrimitive(rs.getString(9)));
						jsonObject.add("vehicle_owner", new JsonPrimitive(rs.getString(10)));
						jsonObject.add("fuel_type_id", new JsonPrimitive(rs.getString(11)));
						jsonObject.add("fuel_capacity", new JsonPrimitive(rs.getString(12)));
						jsonObject.add("fuel_card_no", new JsonPrimitive(rs.getString(13)));
						jsonObject.add("seating_capacity", new JsonPrimitive(rs.getString(14)));
						jsonObject.add("vehicle_avg_km", new JsonPrimitive(rs.getString(15)));
						jsonObject.add("vehicle_expense_account", new JsonPrimitive(rs.getString(16)));
						jsonObject.add("fuel_limit", new JsonPrimitive(rs.getString(17)));
						jsonObject.add("registration_expiry_date", new JsonPrimitive(rs.getDate(18).toString()));
						jsonObject.add("vehicle_expense_account", new JsonPrimitive(rs.getString(19)));
						jsonObject.add("contract_expiry_date", new JsonPrimitive(rs.getDate(20).toString()));
						jsonObject.add("registration_expiry_date", new JsonPrimitive(rs.getString(21)));
			      		jsonObject.add("office_hired_date", new JsonPrimitive(rs.getDate(22).toString()));
						jsonObject.add("hiredRate", new JsonPrimitive(rs.getInt(23)));
						jsonObject.add("contract_ref_no", new JsonPrimitive(rs.getFloat(24)));
						jsonObject.add("vehicle_status", new JsonPrimitive(rs.getString(25)));
						ETHLogger.log(dbConnVar+"_VMS", "yyyy"+jsonObject.toString());
					
				}
					
		}catch(Exception e){

		ETHLogger.log(dbConnVar + "_VMS", e);
		 }
		finally {
			try {
				  if (cstmt != null){
					  cstmt.close();
				  }
				  if(con != null){
				  con.close();
				  }
				  
				  if(rs!=null){
					rs.close();  
					 }
			  } catch (Exception e ) {
				  ETHLogger.log(dbConnVar + "_VMS",e);
			  } 

		}
     
		return jsonObject;
	} 
	
	
	
=======
>>>>>>> .r141685
}
